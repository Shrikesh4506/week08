name: Reusable - Build & Test

on:
  workflow_call:
    inputs:
      service_name:   { required: true,  type: string }    # e.g. product_service or frontend_app
      context_path:   { required: true,  type: string }    # e.g. backend or frontend
      dockerfile:     { required: false, type: string,  default: Dockerfile }
      push_image:     { required: false, type: boolean, default: true }
      node_version:   { required: false, type: string,  default: "20" }
      test_command:   { required: false, type: string,  default: "" }  # e.g. "npm ci && npm test --if-present"
    secrets:
      REGISTRY_LOGIN_SERVER: { required: true }            # e.g. shrikesh.azurecr.io or ghcr.io
      REGISTRY_USERNAME:     { required: true }
      REGISTRY_PASSWORD:     { required: true }

jobs:
  build_and_test:
    name: ${{ inputs.service_name }}
    runs-on: ubuntu-latest

    env:
      REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      # Immutable tag linked to commit; CD can reconstruct it via head_sha
      IMAGE_TAG: ${{ github.sha }}

    outputs:
      image_ref: ${{ steps.meta.outputs.image_ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (only if test_command provided)
        if: ${{ inputs.test_command != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: Run tests/build (optional)
        if: ${{ inputs.test_command != '' }}
        run: ${{ inputs.test_command }}
        working-directory: ${{ inputs.context_path }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build & (optionally) Push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context_path }}
          file: ${{ inputs.context_path }}/${{ inputs.dockerfile }}
          push: ${{ inputs.push_image }}
          tags: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ inputs.service_name }}:${{ env.IMAGE_TAG }}
          # Fast, safe cache stored in GitHub:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - id: meta
        name: Expose image ref
        run: echo "image_ref=${REGISTRY_LOGIN_SERVER}/${{ inputs.service_name }}:${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
