name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: Name of the AKS Cluster
        required: true
      aks_resource_group:
        description: Resource Group of the AKS Cluster
        required: true
      aks_acr_name:
        description: ACR name (kept for compatibility)
        required: false
        default: ""

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group ${{ github.event.inputs.aks_resource_group }} \
            --name ${{ github.event.inputs.aks_cluster_name }} \
            --overwrite-existing

      - name: Ensure namespace and image pull secret
        shell: bash
        run: |
          set -e
          kubectl create namespace sit722-w08 --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret docker-registry acr-pull \
            --docker-server=${{ secrets.REGISTRY_LOGIN_SERVER }} \
            --docker-username=${{ secrets.REGISTRY_USERNAME }} \
            --docker-password=${{ secrets.REGISTRY_PASSWORD }} \
            -n sit722-w08 --dry-run=client -o yaml | kubectl apply -f -
          kubectl patch sa default -n sit722-w08 -p '{"imagePullSecrets":[{"name":"acr-pull"}]}' || true

      - name: Deploy backend services (product/order)
        shell: bash
        run: |
          cat <<'YAML' | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: product-service, namespace: sit722-w08 }
          spec:
            replicas: 1
            selector: { matchLabels: { app: product } }
            template:
              metadata: { labels: { app: product } }
              spec:
                containers:
                - name: product
                  image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/product_service:latest
                  imagePullPolicy: Always
                  ports: [{ containerPort: 8000 }]
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: product-svc, namespace: sit722-w08 }
          spec:
            type: LoadBalancer
            selector: { app: product }
            ports: [{ port: 8000, targetPort: 8000 }]
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: order-service, namespace: sit722-w08 }
          spec:
            replicas: 1
            selector: { matchLabels: { app: order } }
            template:
              metadata: { labels: { app: order } }
              spec:
                containers:
                - name: order
                  image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/order_service:latest
                  imagePullPolicy: Always
                  ports: [{ containerPort: 8002 }]
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: order-svc, namespace: sit722-w08 }
          spec:
            type: LoadBalancer
            selector: { app: order }
            ports: [{ port: 8002, targetPort: 8002 }]
          YAML

      - name: Verify rollout
        run: kubectl get deploy,svc -n sit722-w08 -o wide
